name: DevSecOps Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-deploy-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          rm -rf ~/.cache/pip/*
          pip install -r requirements.txt
          pip install httpx==0.27.2 openai==1.51.0 checkov==3.2.258
          pip list
          python3 -c "import openai; print(openai.__version__)"
          python3 -c "import httpx; print(httpx.__version__)"
          checkov --version
          python3 -c "from openai import OpenAI; print('OpenAI import successful')"
          pip check || echo "Dependency conflicts detected, continuing with warning."
          deactivate

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bootstrap builder
        run: docker buildx inspect --bootstrap

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image
        id: meta
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "image_tag=$GIT_SHA" >> $GITHUB_OUTPUT
          docker build -t ${{ secrets.REGISTRY }}/app:$GIT_SHA -t ${{ secrets.REGISTRY }}/app:latest app
          docker push ${{ secrets.REGISTRY }}/app:$GIT_SHA
          docker push ${{ secrets.REGISTRY }}/app:latest
          sed -i "s|\${IMAGE_TAG}|$GIT_SHA|g" app/k8s/deployment.yaml
          cat app/k8s/deployment.yaml

      - name: Deploy app to k3s
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/namespace.yaml
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --namespace=app-test \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml
          sleep 10
          kubectl get deployment demo-app -n app-test -o wide
          kubectl get pods -n app-test -o wide
          kubectl describe pods -n app-test -l app=demo-app
          kubectl get events -n app-test --sort-by='.lastTimestamp' | tail -10
          kubectl describe ingress demo-app-ing -n app-test
          kubectl rollout status -n app-test deploy/demo-app --timeout=600s || {
            kubectl describe deployment demo-app -n app-test
            kubectl describe pods -n app-test -l app=demo-app
            kubectl logs -n app-test -l app=demo-app --tail=50 --all-containers=true || true
            kubectl get events -n app-test --sort-by='.lastTimestamp'
            exit 1
          }
          kubectl get pods -n app-test -l app=demo-app

      - name: Clear runner cache
        run: |
          rm -rf $HOME/.local/bin/*
          rm -rf $HOME/.cache/*

      # (other steps like Install local scanners, Verify scanner installation, SAST/Secrets/IaC/SCA scans,
      # SBOM generation, DAST scan, Merge findings, AI inference...) stay the same as your original workflow

      - name: Evaluate adaptive gate
        id: gate
        run: |
          source venv/bin/activate
          python3 adaptive/evaluate_gate.py > gate.json
          THRESHOLD=$(jq -r .adaptive_threshold gate.json)
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
          echo "Adaptive threshold set to: $THRESHOLD"
          deactivate

      - name: Check gate
        env:
          THRESH: ${{ steps.gate.outputs.threshold }}
        run: |
          echo "Checking findings against threshold: $THRESH"
          VIOL=$(python3 adaptive/check_gate.py)
          echo "Findings above threshold: $VIOL"
          if [ "$VIOL" -gt 0 ]; then
            echo "❌ Quality gate failed: $VIOL high-risk findings detected"
            exit 1
          else
            echo "✅ Quality gate passed: No high-risk findings"
          fi

      - name: Run Red Team tests
        continue-on-error: true
        run: |
          export KUBECONFIG=kubeconfig
          source venv/bin/activate
          TARGET_HOST=$(kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "staging.hamza-builds.info")
          python3 redteam/run_attacks.py --target http://$TARGET_HOST:80 --out redteam_results.json || echo "[]" > redteam_results.json
          deactivate

      - name: Verify App Accessibility
        continue-on-error: true
        run: |
          curl --fail https://staging.hamza-builds.info || {
            echo "App not accessible at https://staging.hamza-builds.info"
            kubectl describe certificate demo-app-tls -n app-test || echo "Certificate not found"
            kubectl describe clusterissuer letsencrypt-prod || echo "ClusterIssuer not found"
            exit 1
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap-report.json
            zap-report.html
            checkov-report.json
            sast.json
            secrets.json
            sca.json
            sbom.json
            gate.json

      - name: Clean up kubeconfig
        if: always()
        run: |
          rm -f kubeconfig
