name: DevSecOps Pipeline
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  devsecops:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Setup Python + venv ----------
      - name: Setup Python venv
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          deactivate

      # ---------- Install CLI tools locally ----------
      - name: Install scanners
        run: |
          mkdir -p $HOME/.local/bin
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
            | sh -s -- -b $HOME/.local/bin v0.64.1
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz \
            | tar -xz -C $HOME/.local/bin gitleaks
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.60.0/conftest_0.60.0_Linux_x86_64.tar.gz \
            | tar -xz -C $HOME/.local/bin conftest
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh \
            | sh -s -- -b $HOME/.local/bin v1.12.2
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify tools
        run: |
          source venv/bin/activate
          semgrep --version
          checkov --version
          deactivate
          $HOME/.local/bin/trivy --version
          $HOME/.local/bin/gitleaks version
          $HOME/.local/bin/syft --version
          $HOME/.local/bin/conftest --help >/dev/null

      # ---------- Build and push image ----------
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ secrets.REGISTRY }}/app:${{ github.sha }}

      # ---------- SAST / Secrets / IaC / SCA ----------
      - name: Run Semgrep (SAST)
        run: |
          source venv/bin/activate
          semgrep --config auto app/ --json > semgrep.json || true
          deactivate

      - name: Run Gitleaks (Secrets)
        run: $HOME/.local/bin/gitleaks detect --source . --report-format json --report-path gitleaks.json || true

      - name: Run Checkov (IaC)
        run: |
          source venv/bin/activate
          checkov -d app/k8s --output json > checkov.json || true
          deactivate

      - name: Run Syft + Trivy (SCA)
        run: |
          $HOME/.local/bin/syft ${{ secrets.REGISTRY }}/app:${{ github.sha }} -o json > syft.json
          $HOME/.local/bin/trivy image --input syft.json --scanners vuln --format json > trivy.json || true

      # ---------- Deploy to K3s ----------
      - name: Deploy - Setup kubeconfig
        if: github.event_name == 'push'
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl cluster-info

      - name: Deploy - Namespace
        if: github.event_name == 'push'
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/namespace.yaml --validate=false
          NS=$(kubectl get -f app/k8s/namespace.yaml -o jsonpath='{.metadata.name}')
          echo "NS=$NS" >> $GITHUB_ENV

      - name: Deploy - Manifests
        if: github.event_name == 'push'
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml

      - name: Wait for deployment
        if: github.event_name == 'push'
        run: |
          export KUBECONFIG=kubeconfig
          DEPLOY=$(kubectl get -f app/k8s/deployment.yaml -o jsonpath='{.metadata.name}')
          kubectl wait --for=condition=available --timeout=300s deployment/$DEPLOY -n ${{ env.NS }}
          sleep 20

      - name: Get STAGING_HOST
        id: host
        if: github.event_name == 'push'
        run: |
          export KUBECONFIG=kubeconfig
          HOST=$(kubectl get ingress -n ${{ env.NS }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' \
            || kubectl get ingress -n ${{ env.NS }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' || echo "")
          echo "STAGING_HOST=http://$HOST" >> $GITHUB_ENV

      # ---------- DAST with OWASP ZAP ----------
      - name: Run ZAP Baseline Scan
        if: github.event_name == 'push'
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: ${{ env.STAGING_HOST }}
          rules_file_name: .zap/rules.tsv
          cmd_options: "-a"
        continue-on-error: true
      - name: Save ZAP report
        if: github.event_name == 'push'
        run: mv report_json.json zap.json || echo "No zap.json created"

      # ---------- Merge Findings ----------
      - name: Merge findings
        run: |
          source venv/bin/activate
          python risk_model/inference/merge_findings.py \
            --sast semgrep.json \
            --secrets gitleaks.json \
            --iac checkov.json \
            --sca trivy.json \
            --dast zap.json \
            --out findings.jsonl
          deactivate

      # ---------- Inference ----------
      - name: Run inference
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python risk_model/inference/infer.py \
            --artifacts-dir risk_model/artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      # ---------- Adaptive Gate ----------
      - name: Evaluate adaptive gate
        id: gate
        run: |
          source venv/bin/activate
          python adaptive/evaluate_gate.py > gate.json
          echo "threshold=$(jq -r .adaptive_threshold gate.json)" >> $GITHUB_OUTPUT
          deactivate

      - name: Check gate
        run: |
          THRESH=${{ steps.gate.outputs.threshold }}
          VIOL=$(python3 - << 'PY'
          import json,sys,os
          thr=float(os.environ["THR"])
          bad=0
          for l in open("enriched.jsonl"):
              o=json.loads(l)
              if o.get("risk_score",0) >= thr: bad+=1
          print(bad)
          PY
          )
          echo "Findings >= threshold: $VIOL"
          if [ "$VIOL" -gt 0 ]; then echo "Adaptive gate failed"; exit 1; fi
        env:
          THR: ${{ steps.gate.outputs.threshold }}

      # ---------- Threat Model Feedback ----------
      - name: Update threat model
        run: |
          source venv/bin/activate
          python threatmodel/feedback.py enriched.jsonl
          deactivate

      # ---------- Drift Detection ----------
      - name: Check drift
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          source venv/bin/activate
          python drift/check.py
          deactivate

      # ---------- Red Team Simulation ----------
      - name: Red team
        if: github.event_name == 'push'
        run: |
          source venv/bin/activate
          python redteam/run_attacks.py --target ${{ env.STAGING_HOST }} --out redteam_results.json
          deactivate

      # ---------- Summary ----------
      - name: Findings summary
        run: |
          echo "==== Security Findings Summary ===="
          python3 - << 'PY'
          import json, collections
          counts = collections.Counter()
          with open("findings.jsonl") as f:
              for line in f:
                  obj = json.loads(line)
                  src = obj.get("source","unknown")
                  counts[src]+=1
          for src,count in counts.items():
              print(f"{src}: {count}")
          PY

      # ---------- Upload artifacts ----------
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            gate.json
            redteam_results.json
            zap.json
            semgrep.json
            gitleaks.json
            checkov.json
            trivy.json
            syft.json
