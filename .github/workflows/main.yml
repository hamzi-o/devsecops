name: DevSecOps Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-deploy-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          echo "=== Clearing pip cache to ensure fresh dependency installation ==="
          rm -rf ~/.cache/pip/*
          pip install -r requirements.txt
          echo "=== Ensuring httpx==0.27.2 for openai compatibility ==="
          pip install httpx==0.27.2
          echo "=== Installing openai==1.51.0 ==="
          pip install openai==1.51.0
          echo "=== Verifying installed packages ==="
          pip list
          echo "=== Checking openai version ==="
          python3 -c "import openai; print(openai.__version__)" || {
            echo "Failed to import openai. Ensuring httpx and reinstalling openai==1.51.0."
            pip install httpx==0.27.2
            pip install openai==1.51.0
            python3 -c "import openai; print(openai.__version__)"
          }
          echo "=== Checking httpx version ==="
          python3 -c "import httpx; print(httpx.__version__)" || {
            echo "httpx not found, installing httpx==0.27.2."
            pip install httpx==0.27.2
            python3 -c "import httpx; print(httpx.__version__)"
          }
          echo "=== Checking checkov version ==="
          checkov --version || {
            echo "Failed to verify checkov version. Reinstalling checkov==3.2.258."
            pip install checkov==3.2.258
            checkov --version
          }
          echo "=== Checking OpenAI class import ==="
          python3 -c "from openai import OpenAI; print('OpenAI import successful')" || {
            echo "OpenAI class import failed."
            exit 1
          }
          echo "=== Checking for dependency conflicts ==="
          pip check || {
            echo "Dependency conflicts detected, continuing with warning."
            echo "Please review pip check output for potential issues."
          }
          deactivate

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bootstrap builder
        run: docker buildx inspect --bootstrap

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image
        id: meta
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "image_tag=$GIT_SHA" >> $GITHUB_OUTPUT
          echo "Building image: ${{ secrets.REGISTRY }}/app:$GIT_SHA"
          docker build -t ${{ secrets.REGISTRY }}/app:$GIT_SHA -t ${{ secrets.REGISTRY }}/app:latest app
          docker push ${{ secrets.REGISTRY }}/app:$GIT_SHA
          docker push ${{ secrets.REGISTRY }}/app:latest
          sed -i "s|\${IMAGE_TAG}|$GIT_SHA|g" app/k8s/deployment.yaml
          echo "=== Updated deployment.yaml ==="
          cat app/k8s/deployment.yaml

      - name: Deploy app to k3s
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig
          
          kubectl apply -f app/k8s/namespace.yaml
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --namespace=app-test \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml
          
          sleep 10
          kubectl rollout status -n app-test deploy/demo-app --timeout=600s
          kubectl get pods -n app-test -l app=demo-app

      - name: Install local scanners
        continue-on-error: true
        run: |
          mkdir -p $HOME/.local/bin
          export PATH=$HOME/.local/bin:$PATH
          # Install Trivy, ZAP, Gitleaks, Conftest, Syft
          # Example: Trivy
          TRIVY_VERSION="0.66.0"
          curl -L https://github.com/aquasecurity/trivy/releases/download/v$TRIVY_VERSION/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -o trivy.tar.gz
          tar -xzf trivy.tar.gz -C $HOME/.local/bin
          chmod +x $HOME/.local/bin/trivy
          rm -f trivy.tar.gz
          # Install other scanners similarly
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run SAST scan
        continue-on-error: true
        run: |
          source venv/bin/activate
          semgrep --config scanners/semgrep_rules.yml --json > sast.json || echo "[]" > sast.json
          deactivate

      - name: Run Secrets scan
        continue-on-error: true
        run: |
          gitleaks detect --source . --report-path secrets.json || echo "[]" > secrets.json

      - name: Run IaC scan
        continue-on-error: true
        run: |
          source venv/bin/activate
          checkov -d app/k8s --config-file scanners/checkov.yml --output json --output-file-path checkov-report.json || echo '{"results":[]}' > checkov-report.json
          deactivate

      - name: Run SCA scan
        continue-on-error: true
        run: |
          if [ "${{ env.trivy_docker_fallback }}" != "true" ]; then
            trivy fs --format json --output sca.json . || echo "[]" > sca.json
          fi

      - name: Generate SBOM
        continue-on-error: true
        run: |
          syft dir:app -o json > sbom.json || echo "[]" > sbom.json

      - name: DAST scan with OWASP ZAP
        continue-on-error: true
        run: |
          kubectl create configmap zap-config --from-file=zap_config.yaml -n app-test --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f - <<EOF
apiVersion: batch/v1
kind: Job
metadata:
  name: zap-scan
  namespace: app-test
spec:
  template:
    spec:
      containers:
      - name: zap
        image: owasp/zap2docker-stable:2.15.0
        command:
        - zap-baseline.py
        - -t
        - http://demo-app-svc.app-test.svc.cluster.local:80
        - -c
        - /zap/config/zap_config.yaml
        - -r
        - /zap/wrk/zap-report.html
        - -J
        - /zap/wrk/zap-report.json
        volumeMounts:
        - name: zap-config
          mountPath: /zap/config
      restartPolicy: Never
      volumes:
      - name: zap-config
        configMap:
          name: zap-config
  backoffLimit: 1
EOF
          kubectl wait --for=condition=complete job/zap-scan -n app-test --timeout=1800s
          POD_NAME=$(kubectl get pod -n app-test -l job-name=zap-scan -o name | head -n 1)
          kubectl cp app-test/${POD_NAME#pod/}:/zap/wrk/zap-report.json zap-report.json || echo '{"site":[]}' > zap-report.json
          kubectl cp app-test/${POD_NAME#pod/}:/zap/wrk/zap-report.html zap-report.html || echo "<html><body>No ZAP report</body></html>" > zap-report.html

      - name: Run Check Gate
        env:
          THRESH: ${{ steps.gate.outputs.threshold }}
        run: |
          source venv/bin/activate
          python3 adaptive/check_gate.py
          deactivate

      - name: AI inference + HTML report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap-report.json
            zap-report.html
            checkov-report.json
            sast.json
            secrets.json
            sca.json
            sbom.json
            gate.json
