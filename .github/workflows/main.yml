name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install semgrep==1.91.0 checkov==3.2.34 torch==2.4.1 torch-geometric==2.5.3 numpy==1.26.4 pandas==2.2.3
          deactivate

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          use: true

      - name: Bootstrap builder
        run: docker buildx inspect --bootstrap

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: app
          push: true
          tags: ${{ secrets.REGISTRY }}/app:${{ github.sha }}

      - name: Verify model artifacts
        run: |
          echo "${{ secrets.MODEL_CHECKPOINT_SHA256 }} artifacts/vuln_prioritizer_checkpoint.pt" > model.sha256
          sha256sum -c model.sha256
          ls artifacts/scaler.pkl artifacts/best_params.pkl artifacts/vuln_prioritizer_checkpoint.pt || exit 1

      - name: SAST scan
        run: |
          source venv/bin/activate
          semgrep scan app --config scanners/semgrep_rules.yml --json > sast.json || true
          deactivate

      - name: Secrets scan
        run: |
          gitleaks detect --source . --report-path secrets.json || true

      - name: IaC scan
        run: |
          source venv/bin/activate
          if [ -d app/k8s ] && [ "$(ls -A app/k8s)" ]; then
            checkov -d app/k8s -f scanners/checkov.yml --output json > iac.json || true
          else
            echo "No valid IaC files found in app/k8s, skipping checkov scan"
            echo "[]" > iac.json
          fi
          deactivate

      - name: SCA scan
        run: |
          trivy fs --format json --output sca.json . || true

      - name: Generate SBOM
        run: |
          syft dir:app -o json > sbom.json

      - name: Setup kubeconfig
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" | base64 -d > $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl config view
          kubectl get nodes

      - name: Deploy to Kubernetes (app-test)
        env:
          KUBECONFIG: $HOME/.kube/config
        if: github.event_name == 'push'
        run: |
          # Replace image tag in deployment
          sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" app/k8s/deployment.yaml

          # Apply namespace (app-test)
          kubectl apply --validate=false -f app/k8s/namespace.yaml

          # Wait for namespace to exist
          kubectl wait --for=condition=Established --timeout=120s namespace/app-test || true

          # Apply deployment, service, ingress, and policies
          kubectl apply --validate=false -f app/k8s/deployment.yaml -n app-test
          kubectl apply --validate=false -f app/k8s/service.yaml -n app-test
          kubectl apply --validate=false -f app/k8s/ingress.yaml -n app-test
          kubectl apply --validate=false -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply --validate=false -f policies/gatekeeper-constraints/deny-high-risk.yaml

          # Wait for deployment to be available
          kubectl wait --for=condition=available --timeout=300s deployment/devsecops-app -n app-test

      - name: Get STAGING_HOST
        id: get-host
        env:
          KUBECONFIG: $HOME/.kube/config
        if: github.event_name == 'push'
        run: |
          STAGING_HOST=$(kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' || \
                         kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' || echo "")
          if [ -z "$STAGING_HOST" ]; then
            echo "STAGING_HOST not found, using vars.STAGING_HOST"
          else
            echo "STAGING_HOST=http://$STAGING_HOST" >> $GITHUB_ENV

      - name: Validate STAGING_HOST
        if: github.event_name == 'push'
        run: |
          TARGET_HOST=${{ env.STAGING_HOST || vars.STAGING_HOST }}
          if [ -z "$TARGET_HOST" ]; then
            echo "Error: STAGING_HOST is not set"
            exit 1
          fi
          curl -I $TARGET_HOST || echo "Warning: Failed to reach $TARGET_HOST"

      - name: DAST scan with OWASP ZAP
        if: github.event_name == 'push' && (env.STAGING_HOST != '' || vars.STAGING_HOST != '')
        run: |
          TARGET_HOST=${{ env.STAGING_HOST || vars.STAGING_HOST }}
          docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
            -t $TARGET_HOST -r zap_report.html -J zap_report.json || true

      - name: Merge findings
        run: |
          source venv/bin/activate
          python3 risk_model/inference/merge_findings.py \
            --sast sast.json \
            --secrets secrets.json \
            --iac iac.json \
            --sca sca.json \
            --dast zap_report.json \
            --out findings.jsonl
          deactivate

      - name: Run inference
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      - name: Evaluate adaptive gate
        id: gate
        run: |
          python3 adaptive/evaluate_gate.py > gate.json

      - name: Check gate
        run: |
          jq -e '.risk_score >= $(jq .adaptive_threshold gate.json)' enriched.jsonl && exit 1 || exit 0

      - name: Update threat model
        run: |
          python3 threatmodel/feedback.py enriched.jsonl

      - name: Check drift
        env:
          KUBECONFIG: $HOME/.kube/config
        run: |
          python3 drift/check.py

      - name: Red team
        if: github.event_name == 'push' && (env.STAGING_HOST != '' || vars.STAGING_HOST != '')
        run: |
          TARGET_HOST=${{ env.STAGING_HOST || vars.STAGING_HOST }}
          python3 redteam/run_attacks.py --target $TARGET_HOST --out redteam_results.json

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap_report.html
            zap_report.json
