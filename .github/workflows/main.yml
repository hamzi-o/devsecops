name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NS: app-test
  LOCAL_BIN: $HOME/.local/bin
  PATH: $HOME/.local/bin:$PATH

jobs:
  build-and-scan:
    runs-on: self-hosted
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.image_tag }}
      ADAPTIVE_THRESHOLD: ${{ steps.gate.outputs.threshold }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          deactivate

      - name: Install local binaries for scanners
        run: |
          mkdir -p $LOCAL_BIN
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $LOCAL_BIN v0.64.1
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz | tar -xz -C $LOCAL_BIN gitleaks
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.60.0/conftest_0.60.0_Linux_x86_64.tar.gz | tar -xz -C $LOCAL_BIN conftest
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $LOCAL_BIN v1.12.2
          chmod +x $LOCAL_BIN/*

      - name: Verify scanner installation
        run: |
          source venv/bin/activate
          semgrep --version || { echo "Semgrep installation failed"; exit 1; }
          checkov --version || { echo "Checkov installation failed"; exit 1; }
          deactivate
          gitleaks version || { echo "Gitleaks installation failed"; exit 1; }
          trivy --version || { echo "Trivy installation failed"; exit 1; }
          syft --version || { echo "Syft installation failed"; exit 1; }
          zap.sh -version || echo "OWASP ZAP CLI not found, skip for now"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image
        id: meta
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE="${{ secrets.REGISTRY }}/app:$GIT_SHA"
          echo "image_tag=$GIT_SHA" >> $GITHUB_OUTPUT
          docker build -t $IMAGE -t ${{ secrets.REGISTRY }}/app:latest app
          docker push $IMAGE
          docker push ${{ secrets.REGISTRY }}/app:latest

      - name: Patch deployment with correct image
        run: |
          sed -i "s|\${IMAGE_TAG}|${GITHUB_SHA}|g" app/k8s/deployment.yaml
          cat app/k8s/deployment.yaml | grep image:

      - name: Create GHCR imagePullSecret
        run: |
          kubectl create namespace $NS --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            -n $NS --dry-run=client -o yaml | kubectl apply -f -
          kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"ghcr-secret"}]}' -n $NS

      - name: Deploy to k3s
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/namespace.yaml
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml

      - name: Rollout status and debug
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/demo-app -n $NS --timeout=180s || true
          kubectl describe deployment demo-app -n $NS || true
          kubectl get pods -n $NS || true
          kubectl logs -l app=demo-app -n $NS --tail=50 || true

      - name: SAST scan
        run: |
          source venv/bin/activate
          semgrep scan app --config scanners/semgrep_rules.yml --json > sast.json || true
          deactivate

      - name: Secrets scan
        run: gitleaks detect --source . --report-path secrets.json || true

      - name: IaC scan
        run: |
          source venv/bin/activate
          if [ -d app/k8s ] && [ "$(ls -A app/k8s)" ]; then
            checkov -d app/k8s -f scanners/checkov.yml --output json > iac.json || true
          else
            echo "[]" > iac.json
          fi
          deactivate

      - name: SCA scan
        run: trivy fs --format json --output sca.json . || true

      - name: Generate SBOM
        run: syft dir:app -o json > sbom.json

      - name: DAST scan (OWASP ZAP)
        run: |
          source venv/bin/activate
          TARGET=${{ vars.STAGING_HOST }}
          zap.sh -cmd -quickurl $TARGET -quickout zap.json || true
          deactivate

      - name: Merge findings
        run: |
          source venv/bin/activate
          python3 risk_model/inference/merge_findings.py \
            --sast sast.json \
            --secrets secrets.json \
            --iac iac.json \
            --sca sca.json \
            --dast zap.json \
            --out findings.jsonl
          deactivate

      - name: AI inference + HTML report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir risk_model/artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      - name: Adaptive gate threshold
        id: gate
        run: |
          source venv/bin/activate
          python3 adaptive/evaluate_gate.py > gate.json
          echo "threshold=$(jq -r .adaptive_threshold gate.json)" >> $GITHUB_OUTPUT
          deactivate

      - name: Enforce adaptive gate
        run: |
          THRESH=${{ steps.gate.outputs.threshold }}
          VIOL=$(python3 - << 'PY'
          import json,os
          thr=float(os.environ["THR"])
          bad=0
          for l in open("enriched.jsonl"):
              o=json.loads(l)
              if o.get("risk_score",0) >= thr: bad+=1
          print(bad)
          PY
          )
          echo "Findings >= threshold: $VIOL"
          if [ "$VIOL" -gt 0 ]; then echo "Adaptive gate failed"; exit 1; fi
        env:
          THR: ${{ steps.gate.outputs.threshold }}

      - name: Red team tests
        run: |
          source venv/bin/activate
          TARGET=${{ vars.STAGING_HOST }}
          python3 redteam/run_attacks.py --target $TARGET --out redteam_results.json
          deactivate

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap.json
            sast.json
            secrets.json
            iac.json
            sca.json
            sbom.json
