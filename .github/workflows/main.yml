name: DevSecOps Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: self-hosted
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.image_tag }}
      ADAPTIVE_THRESHOLD: ${{ steps.gate.outputs.threshold }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          # install scanners, let pip resolve dependencies
          pip install semgrep checkov jinja2 sentence-transformers joblib scikit-learn lightgbm openai pyyaml
          deactivate

      - name: Install CLI scanners locally
        run: |
          mkdir -p $HOME/.local/bin
          export PATH=$HOME/.local/bin:$PATH
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/.local/bin
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_amd64.tar.gz | tar -xz -C $HOME/.local/bin gitleaks
          curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz | tar -xz -C $HOME/.local/bin conftest
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b $HOME/.local/bin

      - name: Verify scanner installation
        run: |
          export PATH=$HOME/.local/bin:$PATH
          source venv/bin/activate
          semgrep --version
          checkov --version
          deactivate
          trivy --version
          gitleaks version
          syft --version
          conftest --version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push image
        id: meta
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          docker build -t ${{ secrets.REGISTRY }}/app:$IMAGE_TAG -t ${{ secrets.REGISTRY }}/app:latest app
          docker push ${{ secrets.REGISTRY }}/app:$IMAGE_TAG
          docker push ${{ secrets.REGISTRY }}/app:latest

      - name: SAST scan
        run: |
          source venv/bin/activate
          semgrep scan app --config scanners/semgrep_rules.yml --json > sast.json || true
          deactivate

      - name: Secrets scan
        run: |
          gitleaks detect --source . --report-path secrets.json || true

      - name: IaC scan
        run: |
          source venv/bin/activate
          if [ -d app/k8s ] && [ "$(ls -A app/k8s)" ]; then
            checkov -d app/k8s -f scanners/checkov.yml --output json > iac.json || true
          else
            echo "[]" > iac.json
          fi
          deactivate

      - name: SCA scan
        run: |
          export PATH=$HOME/.local/bin:$PATH
          trivy fs --format json --output sca.json . || true

      - name: Generate SBOM
        run: |
          export PATH=$HOME/.local/bin:$PATH
          syft dir:app -o json > sbom.json

  deploy-and-dast:
    runs-on: self-hosted
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create namespace
        run: |
          kubectl apply -f app/k8s/namespace.yaml || true

      - name: Deploy app
        run: |
          export IMAGE_TAG=${{ needs.build-and-scan.outputs.IMAGE_TAG }}
          sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" app/k8s/deployment.yaml
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml
          kubectl rollout status -n app-test deploy/demo-app --timeout=180s

      - name: DAST scan with ZAP
        run: |
          source venv/bin/activate
          export PATH=$HOME/.local/bin:$PATH
          TARGET_HOST=$(kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          zap -cmd -quickurl http://$TARGET_HOST -quickout zap.json -configfile scanners/zap_config.yml || true
          deactivate

      - name: Red Team
        run: |
          source venv/bin/activate
          TARGET_HOST=$(kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}')
          python3 redteam/run_attacks.py --target http://$TARGET_HOST --out redteam_results.json
          deactivate

      - name: Merge findings
        run: |
          source venv/bin/activate
          python3 risk_model/inference/merge_findings.py \
            --sast sast.json \
            --secrets secrets.json \
            --iac iac.json \
            --sca sca.json \
            --dast zap.json \
            --out findings.jsonl
          deactivate

      - name: AI inference + HTML report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir risk_model/artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      - name: Adaptive gate threshold
        id: gate
        run: |
          source venv/bin/activate
          python3 adaptive/evaluate_gate.py > gate.json
          echo "threshold=$(jq -r .adaptive_threshold gate.json)" >> $GITHUB_OUTPUT
          deactivate

      - name: Enforce adaptive gate
        run: |
          THRESH=${{ steps.gate.outputs.threshold }}
          VIOL=$(python3 - << 'PY'
          import json,sys,os
          thr=float(os.environ["THR"])
          bad=0
          for l in open("enriched.jsonl"):
              o=json.loads(l)
              if o.get("risk_score",0) >= thr: bad+=1
          print(bad)
          PY
          )
          echo "Findings >= threshold: $VIOL"
          if [ "$VIOL" -gt 0 ]; then exit 1; fi
        env:
          THR: ${{ steps.gate.outputs.threshold }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap.json
            sast.json
            secrets.json
            iac.json
            sca.json
            sbom.json
