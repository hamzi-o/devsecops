name: DevSecOps Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-deploy-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          rm -rf ~/.cache/pip/*
          pip install -r requirements.txt
          pip install httpx==0.27.2 openai==1.51.0 checkov==3.2.258
          pip check || echo "Warning: dependency conflicts detected"
          deactivate

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Bootstrap builder
        run: docker buildx inspect --bootstrap

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image
        id: meta
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "image_tag=$GIT_SHA" >> $GITHUB_OUTPUT
          docker build -t ${{ secrets.REGISTRY }}/app:$GIT_SHA -t ${{ secrets.REGISTRY }}/app:latest app
          docker push ${{ secrets.REGISTRY }}/app:$GIT_SHA
          docker push ${{ secrets.REGISTRY }}/app:latest
          sed -i "s|\${IMAGE_TAG}|$GIT_SHA|g" app/k8s/deployment.yaml

      - name: Deploy app to k3s
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/namespace.yaml
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ secrets.GHCR_USERNAME }} \
            --docker-password=${{ secrets.GHCR_TOKEN }} \
            --namespace=app-test \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml
          sleep 10
          kubectl rollout status -n app-test deploy/demo-app --timeout=600s

      - name: Clear runner cache
        run: |
          rm -rf $HOME/.local/bin/*
          rm -rf $HOME/.cache/*

      - name: Install local scanners
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p $HOME/.local/bin
          export PATH=$HOME/.local/bin:$PATH
          # ... installation of ZAP, Trivy, Gitleaks, Conftest, Syft (same as before)

      - name: Verify scanner installation
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          source venv/bin/activate
          semgrep --version || { echo "Semgrep installation failed"; exit 1; }
          checkov --version || { echo "Checkov installation failed"; exit 1; }
          $HOME/.local/bin/zap/zap.sh -version || { echo "OWASP ZAP installation failed"; exit 1; }
          deactivate

      - name: Run SAST scan
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          source venv/bin/activate
          semgrep --config scanners/semgrep_rules.yml --json > sast.json || echo "[]" > sast.json
          deactivate

      - name: Run Secrets scan
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          gitleaks detect --source . --report-path secrets.json || echo "[]" > secrets.json

      - name: Run IaC scan (Checkov) - modified
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          source venv/bin/activate

          mkdir -p scanners
          if [ -d scanners/results.json ]; then
            mv scanners/results.json scanners/results.json.dir_$(date +%s)
          fi

          if [ ! -f scanners/checkov.yml ]; then
            echo "scanners/checkov.yml not found; creating empty results"
            printf '{"results": {"failed_checks": [], "passed_checks": [], "skipped_checks": []}}' > scanners/results.json
            deactivate
            exit 0
          fi

          checkov -d app/k8s --config-file scanners/checkov.yml --output json --output-file-path scanners/results.json 2> checkov_error.log || \
          (echo "Checkov failed; creating empty result" && printf '{"results": {"failed_checks": [], "passed_checks": [], "skipped_checks": []}}' > scanners/results.json)

          deactivate

      - name: Run SCA scan
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          # ... same as before

      - name: Generate SBOM
        continue-on-error: true
        run: |
          export PATH=$HOME/.local/bin:$PATH
          syft dir:app -o json > sbom.json || echo "[]" > sbom.json

      - name: Wait for service to be ready
        run: |
          export KUBECONFIG=kubeconfig
          kubectl wait --for=condition=ready pod -n app-test -l app=demo-app --timeout=300s

      - name: DAST scan with OWASP ZAP
        continue-on-error: true
        run: |
          export KUBECONFIG=kubeconfig
          # ... ZAP job creation and execution (same as before)

      - name: Merge findings - updated Checkov path
        run: |
          source venv/bin/activate
          python3 risk_model/inference/merge_findings.py \
            --sast sast.json \
            --secrets secrets.json \
            --iac scanners/results.json \
            --sca sca.json \
            --dast zap-report.json \
            --out findings.jsonl
          deactivate
          echo "Debug: Merged Findings"
          cat findings.jsonl || echo "No findings.jsonl found"

      - name: AI inference + HTML report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate

      - name: Evaluate adaptive gate
        id: gate
        run: |
          source venv/bin/activate
          python3 adaptive/evaluate_gate.py > gate.json
          THRESHOLD=$(jq -r .adaptive_threshold gate.json)
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
          deactivate

      - name: Check gate
        env:
          THRESH: ${{ steps.gate.outputs.threshold }}
        run: |
          source venv/bin/activate
          python3 adaptive/check_gate.py
          deactivate

      - name: Run Red Team tests
        continue-on-error: true
        run: |
          export KUBECONFIG=kubeconfig
          source venv/bin/activate
          TARGET_HOST=$(kubectl get ingress -n app-test -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "staging.hamza-builds.info")
          python3 redteam/run_attacks.py --target http://$TARGET_HOST:80 --out redteam_results.json || echo "[]" > redteam_results.json
          deactivate

      - name: Verify App Accessibility
        continue-on-error: true
        run: |
          curl --fail http://staging.hamza-builds.info || curl --fail --insecure https://staging.hamza-builds.info || echo "App not accessible"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report-${{ github.run_number }}
          path: |
            report.html
            findings.jsonl
            enriched.jsonl
            redteam_results.json
            zap-report.json
            zap-report.html
            scanners/results.json
            sast.json
            secrets.json
            sca.json
            sbom.json
            gate.json

      - name: Clean up kubeconfig
        if: always()
        run: |
          rm -f kubeconfig
