name: DevSecOps Pipeline
on:
  push: { branches: ["main"] }
  pull_request: { branches: ["main"] }
jobs:
  build-and-scan:
    runs-on: self-hosted
    strategy:
      matrix:
        scanner: [semgrep, gitleaks, checkov, trivy, syft]
    outputs:
      IMAGE_TAG: ${{ steps.meta.outputs.image_tag }}
      ADAPTIVE_THRESHOLD: ${{ steps.gate.outputs.threshold }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
      - name: Set up Python virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          deactivate
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        if: secrets.GHCR_TOKEN != ''
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin
      - name: Build & push image
        id: meta
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          echo "image_tag=$GIT_SHA" >> $GITHUB_OUTPUT
          docker build -t $REGISTRY/app:$GIT_SHA -t $REGISTRY/app:latest app
          docker push $REGISTRY/app:$GIT_SHA
          docker push $REGISTRY/app:latest
      - name: Install scanners
        run: |
          source venv/bin/activate
          pip install semgrep==1.132.1 checkov==3.2.461 jinja2==3.1.4 sentence-transformers==2.7.0 joblib==1.4.2 scikit-learn==1.4.2 lightgbm==4.3.0 openai==1.35.0 pyyaml==6.0.2
          deactivate
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.64.1
          curl -sSL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz | tar -xz -C /usr/local/bin gitleaks
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.60.0/conftest_0.60.0_Linux_x86_64.tar.gz | tar -xz -C /usr/local/bin conftest
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.12.2
      - name: Run ${{ matrix.scanner }}
        run: |
          source venv/bin/activate
          if [ "${{ matrix.scanner }}" = "semgrep" ]; then semgrep --config=scanners/semgrep_rules.yml --json > sast.json || true; fi
          if [ "${{ matrix.scanner }}" = "gitleaks" ]; then gitleaks detect --source=. --report-format json --report-path secrets.json || true; fi
          if [ "${{ matrix.scanner }}" = "checkov" ]; then checkov -d app/k8s --output json -f scanners/checkov.yml > iac.json || true; fi
          if [ "${{ matrix.scanner }}" = "trivy" ]; then trivy image --format json -o sca.json $REGISTRY/app:${{ steps.meta.outputs.image_tag }} || true; fi
          if [ "${{ matrix.scanner }}" = "syft" ]; then syft dir:app -o json > sbom.json; fi
          deactivate
      - name: Merge findings
        run: |
          source venv/bin/activate
          python3 risk_model/inference/merge_findings.py --sast sast.json --sca sca.json --iac iac.json --secrets secrets.json --out findings.jsonl
          deactivate
      - name: Download risk model
        run: |
          curl -L "${{ secrets.RISK_MODEL_URL }}" -o risk_model/artifacts/vuln_prioritizer_checkpoint.pt
          echo "${{ secrets.RISK_MODEL_SHA256 }}" | sha256sum -c -
      - name: AI inference + HTML report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          source venv/bin/activate
          python3 risk_model/inference/infer.py \
            --artifacts-dir risk_model/artifacts \
            --in findings.jsonl \
            --out enriched.jsonl \
            --report report.html
          deactivate
      - name: Adaptive gate threshold
        id: gate
        run: |
          source venv/bin/activate
          python3 adaptive/evaluate_gate.py > thr.json
          echo "threshold=$(jq -r .adaptive_threshold thr.json)" >> $GITHUB_OUTPUT
          echo "Adaptive threshold: $(jq -r .adaptive_threshold thr.json)"
          deactivate
      - name: Enforce adaptive gate
        run: |
          THRESH=${{ steps.gate.outputs.threshold }}
          VIOL=$(python3 - << 'PY'
          import json,sys,os
          thr=float(os.environ["THR"])
          bad=0
          for l in open("enriched.jsonl"):
              o=json.loads(l)
              if o.get("risk_score",0) >= thr: bad+=1
          print(bad)
          PY
          )
          echo "Findings >= threshold: $VIOL"
          if [ "$VIOL" -gt 0 ]; then echo "Adaptive gate failed"; exit 1; fi
        env:
          THR: ${{ steps.gate.outputs.threshold }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scans-and-report
          path: |
            sast.json
            secrets.json
            iac.json
            sca.json
            sbom.json
            findings.jsonl
            enriched.jsonl
            report.html
            thr.json
  deploy:
    runs-on: self-hosted
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v4
      - name: Setup kubeconfig
        run: echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
      - name: Deploy to k3s
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f app/k8s/namespace.yaml
          kubectl apply -f app/k8s/deployment.yaml
          kubectl apply -f app/k8s/service.yaml
          kubectl apply -f app/k8s/ingress.yaml
          kubectl apply -f policies/gatekeeper-templates/deny-high-risk.yaml
          kubectl apply -f policies/gatekeeper-constraints/deny-high-risk.yaml
        env:
          IMAGE_TAG: ${{ needs.build-and-scan.outputs.IMAGE_TAG }}
      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status -n app-test deploy/demo-app --timeout=60s
      - name: Red team tests
        run: |
          source venv/bin/activate
          python3 redteam/run_attacks.py --target http://${{ vars.STAGING_HOST }} --out redteam_results.json
          deactivate
      - name: Upload red team results
        uses: actions/upload-artifact@v4
        with:
          name: redteam-results
          path: redteam_results.json
